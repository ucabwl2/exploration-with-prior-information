#pragma once

#include "math.h"
#include "ros/ros.h"
#include "ros/time.h"
#include "string.h"
#include <Eigen/Core>
#include <Eigen/Eigenvalues>
#include <Eigen/Geometry>
#include <angles/angles.h>
#include <boost/filesystem.hpp>
#include <cstdio>
#include <iomanip>
#include <iostream>
#include <iostream>
#include <ndt_generic/eigen_utils.h>
#include <ndt_generic/utils.h>
#include <pcl/io/pcd_io.h>
#include <stdio.h>
#include <stdlib.h>
#include <vector>

namespace ndt_generic {

// Provides a vector of files (or if the provided path string is a file then add
// it into the vector).
// ext - extension, should contain the dot (.), e.g. ".doc".
class StepControl { // provide tool to stop the program and wait for new
public:
  inline StepControl() {
    next = 0;
    visualize = true;
  }

  void Step(int counter);

  inline void PrintCommands() {
    std::cout << "5=1 step, 6=10 steps, 7=100 steps 8=1000 steps 9=continue"
              << std::endl;
  }

  bool visualize;

private:
  unsigned int next;
};

std::string ToString(Eigen::Vector3i var);
void extract_file_names(const std::string &path, const std::string &ext,
                        std::vector<std::string> &files);

// Load the evaluation files that are generated by the fuser, <timestamp> x y x
// qx qy qz qw.
std::vector<Eigen::Affine3d>
loadAffineFromEvalFile(const std::string &fileName);

// Load timestamps from the evaluation files that are generated by the fuser...
std::vector<double> loadTimeStampFromEvalFile(const std::string &fileName);

// Useful to load a set of files
void loadCloud(const std::string &base_name_pcd, int counter,
               pcl::PointCloud<pcl::PointXYZ> &cloud);

void saveAffine3dRPY(const std::string &filename, const Eigen::Affine3d &T);

// Save the evaluation files that are generated by the fuser, <timestamp> x y x
// qx qy qz qw.
// Timesamps are set to the index.
void saveAffineToEvalFile(const std::string &filename,
                          const std::vector<Eigen::Affine3d> &Ts);

std::vector<double> loadDoubleVecTextFile(const std::string &fileName);

void saveDoubleVecTextFile(const std::vector<double> &vec,
                           const std::string &fileName);

std::string removeExtension(const std::string &filename);

class CreateEvalFiles {
public:
  CreateEvalFiles(const std::string &output_dir_name,
                  const std::string &base_name, bool enable = true);

  void Write(const ros::Time frame_time, const Eigen::Affine3d &Tgtbase,
             const Eigen::Affine3d &Todombase,
             const Eigen::Affine3d &Tfuserpose,
             const Eigen::Affine3d &Tfuser_sensorpose);
  void Close();

private:
  void CreateOutputFiles();
  bool enable_;
  std::string output_dir_name_, base_name_;
  std::ofstream gt_file, odom_file, est_file,
      sensorpose_est_file; // output files
};

} // namespace

